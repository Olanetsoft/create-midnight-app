import path from "path";
import { levelPrivateStateProvider } from "@midnight-ntwrk/midnight-js-level-private-state-provider";
import { indexerPublicDataProvider } from "@midnight-ntwrk/midnight-js-indexer-public-data-provider";
import { NodeZkConfigProvider } from "@midnight-ntwrk/midnight-js-node-zk-config-provider";
import { httpClientProofProvider } from "@midnight-ntwrk/midnight-js-http-client-proof-provider";

export interface NetworkConfig {
  indexer: string;
  indexerWS: string;
  node: string;
  proofServer: string;
  name: string;
}

export interface ProviderConfig {
  contractName: string;
  walletProvider: any;
  networkConfig: NetworkConfig;
  privateStateStoreName?: string;
}

export class MidnightProviders {
  static create(config: ProviderConfig) {
    const contractPath = path.join(process.cwd(), "contracts");
    const zkConfigPath = path.join(
      contractPath,
      "managed",
      config.contractName
    );

    return {
      privateStateProvider: levelPrivateStateProvider({
        privateStateStoreName:
          config.privateStateStoreName || `${config.contractName}-state`,
      }),
      publicDataProvider: indexerPublicDataProvider(
        config.networkConfig.indexer,
        config.networkConfig.indexerWS
      ),
      zkConfigProvider: new NodeZkConfigProvider(zkConfigPath),
      proofProvider: httpClientProofProvider(config.networkConfig.proofServer),
      walletProvider: config.walletProvider,
      midnightProvider: config.walletProvider,
    };
  }
}
