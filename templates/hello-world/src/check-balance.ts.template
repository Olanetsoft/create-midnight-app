import "dotenv/config";
import { WalletBuilder } from "@midnight-ntwrk/wallet";
import {
  NetworkId,
  setNetworkId,
  getZswapNetworkId,
  getLedgerNetworkId,
} from "@midnight-ntwrk/midnight-js-network-id";
import { nativeToken } from "@midnight-ntwrk/ledger";
import { WebSocket } from "ws";
import * as Rx from "rxjs";
import { MidnightProviders } from "./providers/midnight-providers.js";
import { EnvironmentManager } from "./utils/environment.js";

// Fix WebSocket for Node.js environment
// @ts-ignore
globalThis.WebSocket = WebSocket;

// Configure for Midnight Testnet
setNetworkId(NetworkId.TestNet);

async function checkBalance() {
  try {
    console.log("\nüåô Checking Wallet Balance\n");

    const seed = process.env.WALLET_SEED;
    if (!seed) {
      throw new Error("WALLET_SEED not found in .env file");
    }

    console.log("Building wallet...");

    // Get network configuration
    const networkConfig = EnvironmentManager.getNetworkConfig();

    // Create providers
    const providers = MidnightProviders.create({
      indexerUrl: networkConfig.indexerUrl,
      indexerWsUrl: networkConfig.indexerWsUrl,
      prooServerUrl: networkConfig.proofServerUrl,
      walletSeed: seed,
      zkConfigPath: networkConfig.zkConfigPath,
    });

    // Build wallet
    const wallet = await WalletBuilder.buildFromSeed(
      getLedgerNetworkId(),
      seed,
      providers.privateStateProvider,
      providers.zkConfigProvider,
      providers.publicDataProvider,
      { coinPublicKey: providers.coinPublicKey }
    );

    wallet.start();

    const state = await Rx.firstValueFrom(wallet.state());

    console.log(`Wallet Address: ${state.address}`);

    const balance = state.balances[nativeToken()] || 0n;

    if (balance === 0n) {
      console.log(`\nüí∞ Balance: 0 DUST\n`);
      console.log("‚ùå No funds detected.");
      console.log("\nüìù To get funds:");
      console.log("   1. Visit: https://midnight.network/test-faucet");
      console.log("   2. Paste your wallet address");
      console.log("   3. Wait a few minutes for the transaction to process");
      console.log("   4. Run 'npm run check-balance' again to verify");
      console.log("\nüí° Note: Faucet transactions can take 2-5 minutes to process.");
    } else {
      console.log(`\nüí∞ Balance: ${balance} DUST\n`);
      console.log("‚úÖ Wallet is funded!");
      console.log("\nüöÄ You can now deploy your contract:");
      console.log("   npm run deploy");
    }

    wallet.close();
    process.exit(0);
  } catch (error) {
    console.error("Error checking balance:", error);
    process.exit(1);
  }
}

checkBalance();
